#!/bin/echo This file has to be soursed. Run: source 

# lib-sh/common - Common functions for everyday use
# Copyright (c) 2016 by Oleksii Tsvietnov, me@vorakl.name
# Version: v1.0.0


cmd() {
    # Do not try to run a function with the same name as a running command has.
    # First, it checks in builtins. Then, it tries to find an external command.
    #   -p  search in standard paths only
    #   -v  check if a command exists

    builtin command "$@"
}

assert_utils() {
    :
}

run() {
    # usage: 
    #   run [--silent|--no-out|--no-err] \
    #       [--save-out var|--save-err var] \
    #       [--join-outerr] \
    #       [--ignore|--warn|--ensure] \
    #       [--] \
    #       cmd arg ...

    local _arg="" _line="" _channels=""
    local _silent="0" _no_out="0" _no_err="0" _join_outerr="0"
    local _save_out="run_out" _save_err="run_err"
    local _ignore="0" _warn="0" _ensure="0"

    while [[ "$@" ]]; do
        case "$1" in
            --) 
                shift
                break
                ;;
            --*) 
                _arg="${1#--}"
                case "${_arg}" in
                    silent|no-out|no-err|join-outerr|ignore|warn|ensure) 
                        eval _${_arg/-/_}="1"
                        ;;
                    save-out|save-err)
                        shift
                        eval _${_arg/-/_}="$1"
                        ;;
                esac
                shift
                ;;
            *)  
                break
                ;;
        esac
    done

    if (( _silent )); then
        _channels="1>/dev/null 2>/dev/null"
    elif (( _no_out )); then
        _channels="1>/dev/null"
    elif (( _no_err )); then
        _channels="2>/dev/null"
    elif (( _join_outerr )); then
        _channels="2>&1"
    fi

    eval '"$@" ${_channels}'
# _line=""; _fd=3; until { read -u ${_fd} _line; [[ "${_line}" == "-=STOP=-" ]]; } do echo "${_line}"; done
}

say() {
    # Print to stdout

    (( say_suppress )) || cmd printf "${say_format}" "$@"
}

__say_conf__() {
    say_suppress=0
    say_format="%s\n"
}

debug() {
    # Print to stdout as `say` does but only if debug_suppress is turned off
    # It's useful for having a higher level of verbosity

    (( debug_suppress )) || cmd printf "${debug_format}" "$@"
}

__debug_conf__() {
    debug_suppress=1
    debug_format="%s\n"
}

err() {
    # Print to stderr

    (( err_suppress )) || cmd printf "${err_format}" "$@" >&2
}

__err_conf__() {
    err_suppress=0
    err_format="%s\n"
}

die() {
    err "$@"
    cmd exit ${die_exitcode}
}

__die_conf__() {
    die_exitcode=1
}

__common_conf__() {
    unset builtin
    __say_conf__
    __debug_conf__
    __err_conf__
    __die_conf__
}

__common_conf__
cmd declare -F __common_init__ &> /dev/null && __common_init__ || cmd true
